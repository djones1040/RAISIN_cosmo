
[runtime]
sampler = importance

[importance]
; Chain of input samples (Planck likelihoods in this case).
input = planck_samples/chain_p-TTTEEE-lowE_SNmag_wcdm.txt
; Number of samples to do between saving output.
nstep = 1
; Include the old likelihood in the old likelihood; i.e. P'=P*P_new.
add_to_likelihood = T

[output]
filename = raisin_samples/raisin_biascorst.txt
format = text
verbosity= debug

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and
; Riess 2011 to anchor H0, which is otherwise degenerate
; with the nuisance parameter M
modules = consistency camb pantheon
values = raisin_values.ini
extra_output =
likelihoods = pantheon
; jla
quiet=T
debug=F
timing=F

[camb]
; For background-only data we do not need a full
; Boltzmann evaluation, just D(z), etc.
; Setting mode=background means we get this.
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=background
feedback=0

[pantheon]
file = /n/holystore01/LABS/berger_lab/Lab/djones01/RAISIN/cosmosis/cosmosis-standard-library/likelihood/pantheon/pantheon.py
data_file = /n/holystore01/LABS/berger_lab/Lab/djones01/RAISIN/cosmo/output/cosmo_fitres_optical/RAISIN_biascorst_lcparams_cosmosis.txt
covmat_file = /n/holystore01/LABS/berger_lab/Lab/djones01/RAISIN/cosmo/output/cosmo_fitres_optical/RAISIN_biascorst.covmat

[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

